# Utils
import os
import glob
from dateutil.relativedelta import relativedelta
from tqdm.auto import tqdm
from natsort import natsorted
import time

# Data
import numpy as np
import pandas as pd

from utils import load_common_config, load_pickle, get_time

use_tqdm = False

t_init = time.time()

# Determine the dataset name from the current working directory
DATASET = os.getcwd().split('/')[-1]

# Define base paths for dataset
data_path = f'../../data/{DATASET}'
figures_path = f'../../figures/{DATASET}'

# Load common config file
config = load_common_config(f'../../data/common/datasets_config.json')

# Extract date parameters from config
INITIAL_DATE = pd.to_datetime(config[DATASET]['initial_date'])
FINAL_DATE = pd.to_datetime(config[DATASET]['final_date'])
TIMESTEP = config[DATASET]['timestep']

project_df = pd.read_csv(f'{data_path}/data_aggregated.csv')
project_df['DATE'] = pd.to_datetime(project_df['DATE'])

project_df['iteration'] = 0
iteration = 0
current_date = INITIAL_DATE
while current_date < FINAL_DATE:
    iteration += 1
    next_date = current_date + relativedelta(months=TIMESTEP)
    next_smiles = project_df[(project_df['DATE'] >= current_date) & (project_df['DATE'] < next_date)]['SMILES'].unique()
    project_df.loc[project_df['SMILES'].isin(next_smiles), 'iteration'] = iteration
    current_date = next_date

top_molecules = load_pickle(f'{data_path}/top_molecules.pkl')
top_categories = list(top_molecules['geometric'].keys())

all_strategy_paths = glob.glob(f'../../experiments/{DATASET}/*')
if os.path.exists(f'{data_path}/exploitation.parquet'):
    results_df = pd.read_parquet(f'{data_path}/exploitation.parquet')
    strategy_paths = []
    for strategy_path in all_strategy_paths:
        strategy_name = strategy_path.split('/')[-1]
        if strategy_name not in results_df['strategy'].unique():
            strategy_paths.append(strategy_path)
else:
    results_df = pd.DataFrame()
    strategy_paths = glob.glob(f'../../experiments/{DATASET}/*')

strategy_paths = natsorted(strategy_paths)

all_strategy_paths = glob.glob(f'../../experiments/{DATASET}/*')
if os.path.exists(f'{data_path}/exploitation.parquet'):
    results_df = pd.read_parquet(f'{data_path}/exploitation.parquet')
    strategy_paths = []
    for strategy_path in all_strategy_paths:
        strategy_name = strategy_path.split('/')[-1]
        if strategy_name not in results_df['strategy'].unique():
            strategy_paths.append(strategy_path)
else:
    results_df = pd.DataFrame()
    strategy_paths = glob.glob(f'../../experiments/{DATASET}/*')

strategy_paths = natsorted(strategy_paths)

print(f"[{get_time()}]  ⚙️ Exploitation : {len(strategy_paths)} experiments to process (out of {len(all_strategy_paths)})")

for top_category in tqdm(top_categories, leave=False, disable=not use_tqdm):

    all_top = top_molecules['geometric'][f'{top_category}']

    for strategy_path in tqdm(strategy_paths, leave=False, disable=not use_tqdm):

        strategy_name = strategy_path.split('/')[-1]
        replicate_paths = natsorted(glob.glob(os.path.join(strategy_path, f'replicate*')))
        nb_replicate = len(replicate_paths)

        for replicate_path in replicate_paths:
            
            replicate_id = int(replicate_path.split('_')[-1])

            iteration_paths = natsorted(glob.glob(os.path.join(replicate_path, '*')))
            train_df = pd.read_csv(os.path.join(iteration_paths[-1], 'train_df.csv'))
            last_df = pd.read_csv(os.path.join(iteration_paths[-1], 'selected_train_df.csv'))
            df = pd.concat([train_df, last_df], axis=0).sort_values(by=['iteration'])

            proportions_top_selected = []
            proportions_all_selected = []
            iterations = []
            
            for iteration in range(0, df['iteration'].max() + 1):

                if len(all_top) != 0:
                    smiles_top_selected = np.intersect1d(df[df['iteration'] <= iteration]['SMILES'].values, all_top)
                    proportion_top_selected = len(smiles_top_selected)/len(all_top)
                    proportion_all_selected = len(df[df['iteration'] <= iteration])/len(project_df)
                    
                    proportions_top_selected.append(proportion_top_selected)
                    proportions_all_selected.append(proportion_all_selected)
                    iterations.append(iteration)

            tmp_df = pd.DataFrame()
            tmp_df['iterations'] = iterations
            tmp_df['proportions_top_selected'] = proportions_top_selected
            tmp_df['proportions_all_selected'] = proportions_all_selected
            tmp_df['strategy'] = strategy_name
            tmp_df['replicate'] = replicate_id
            tmp_df['top_category'] = top_category
            
            results_df = pd.concat([results_df, tmp_df])

results_df.to_parquet(f'{data_path}/exploitation.parquet', index=False)


print(f"[{get_time()}]  ⚙️ Exploitation : project timeline")

results_df = pd.DataFrame()

for top_category in tqdm(top_categories, leave=False, disable=not use_tqdm):

    all_top = top_molecules['geometric'][f'{top_category}']

    proportions_top_selected = []
    proportions_all_selected = []
    iterations = []
            
    for iteration in tqdm(range(0, project_df['iteration'].max() + 1), leave=False, disable=not use_tqdm):

        if len(all_top) != 0:
            smiles_top_selected = np.intersect1d(project_df[project_df['iteration'] <= iteration]['SMILES'].values, all_top)
            proportion_top_selected = len(smiles_top_selected)/len(all_top)
            proportion_all_selected = len(project_df[project_df['iteration'] <= iteration])/len(project_df)
            
            proportions_top_selected.append(proportion_top_selected)
            proportions_all_selected.append(proportion_all_selected)
            iterations.append(iteration)

    tmp_df = pd.DataFrame()
    tmp_df['iterations'] = iterations
    tmp_df['proportions_top_selected'] = proportions_top_selected
    tmp_df['proportions_all_selected'] = proportions_all_selected
    tmp_df['top_category'] = top_category
    
    results_df = pd.concat([results_df, tmp_df])

results_df.to_parquet(f'{data_path}/project_exploitation.parquet', index=False)

print(f"[{get_time()}]  ✅  Postprocessing (2.2) : Exploitation in {time.time() - t_init:.2f} seconds")